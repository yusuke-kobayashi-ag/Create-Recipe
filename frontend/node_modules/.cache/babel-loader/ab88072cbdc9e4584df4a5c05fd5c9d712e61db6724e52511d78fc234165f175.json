{"ast":null,"code":"const API_BASE_URL='http://localhost:8000';export const generateRecipe=async ingredients=>{try{// 食材リストをレシピ作成用の形式に変換\nconst recipeData={title:`${ingredients.join('と')}を使ったレシピ`,description:`${ingredients.join('、')}を使った美味しいレシピです。`,instructions:`1. ${ingredients.join('、')}を適切な大きさに切ります。\\n2. 材料を炒めます。\\n3. 調味料を加えて煮込みます。`,difficulty:\"medium\",cooking_time:30,servings:2,image_url:null,season:\"all\",cuisine_type:\"japanese\",ingredients:ingredients.map(name=>({name:name,unit:\"適量\",calories:null,protein:null,fat:null,carbs:null,season:\"all\",category:\"other\",is_vegetarian:true,is_vegan:true}))};const response=await fetch(`${API_BASE_URL}/recipes/`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(recipeData)});if(!response.ok){throw new Error('レシピの生成に失敗しました');}return await response.json();}catch(error){console.error('Error generating recipe:',error);throw error;}};export const generateRecipeWithAI=async(ingredients,servings)=>{const response=await fetch('http://localhost:8000/api/v1/recipes/generate/ai',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({ingredients,servings})});if(!response.ok){throw new Error('レシピ生成に失敗しました');}return await response.json();};export const deleteRecipe=async id=>{const response=await fetch(`http://localhost:8000/api/v1/recipes/${id}`,{method:'DELETE'});if(!response.ok){throw new Error('レシピの削除に失敗しました');}return await response.json();};","map":{"version":3,"names":["API_BASE_URL","generateRecipe","ingredients","recipeData","title","join","description","instructions","difficulty","cooking_time","servings","image_url","season","cuisine_type","map","name","unit","calories","protein","fat","carbs","category","is_vegetarian","is_vegan","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","error","console","generateRecipeWithAI","deleteRecipe","id"],"sources":["/Users/yusukekobayashi/Desktop/Python_Application/AWS/frontend/src/api/recipe.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8000';\n\nexport const generateRecipe = async (ingredients) => {\n  try {\n    // 食材リストをレシピ作成用の形式に変換\n    const recipeData = {\n      title: `${ingredients.join('と')}を使ったレシピ`,\n      description: `${ingredients.join('、')}を使った美味しいレシピです。`,\n      instructions: `1. ${ingredients.join('、')}を適切な大きさに切ります。\\n2. 材料を炒めます。\\n3. 調味料を加えて煮込みます。`,\n      difficulty: \"medium\",\n      cooking_time: 30,\n      servings: 2,\n      image_url: null,\n      season: \"all\",\n      cuisine_type: \"japanese\",\n      ingredients: ingredients.map(name => ({\n        name: name,\n        unit: \"適量\",\n        calories: null,\n        protein: null,\n        fat: null,\n        carbs: null,\n        season: \"all\",\n        category: \"other\",\n        is_vegetarian: true,\n        is_vegan: true\n      }))\n    };\n\n    const response = await fetch(`${API_BASE_URL}/recipes/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(recipeData),\n    });\n\n    if (!response.ok) {\n      throw new Error('レシピの生成に失敗しました');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error generating recipe:', error);\n    throw error;\n  }\n};\n\nexport const generateRecipeWithAI = async (ingredients, servings) => {\n  const response = await fetch('http://localhost:8000/api/v1/recipes/generate/ai', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ ingredients, servings }),\n  });\n  if (!response.ok) {\n    throw new Error('レシピ生成に失敗しました');\n  }\n  return await response.json();\n};\n\nexport const deleteRecipe = async (id) => {\n  const response = await fetch(`http://localhost:8000/api/v1/recipes/${id}`, {\n    method: 'DELETE',\n  });\n  if (!response.ok) {\n    throw new Error('レシピの削除に失敗しました');\n  }\n  return await response.json();\n}; "],"mappings":"AAAA,KAAM,CAAAA,YAAY,CAAG,uBAAuB,CAE5C,MAAO,MAAM,CAAAC,cAAc,CAAG,KAAO,CAAAC,WAAW,EAAK,CACnD,GAAI,CACF;AACA,KAAM,CAAAC,UAAU,CAAG,CACjBC,KAAK,CAAE,GAAGF,WAAW,CAACG,IAAI,CAAC,GAAG,CAAC,SAAS,CACxCC,WAAW,CAAE,GAAGJ,WAAW,CAACG,IAAI,CAAC,GAAG,CAAC,gBAAgB,CACrDE,YAAY,CAAE,MAAML,WAAW,CAACG,IAAI,CAAC,GAAG,CAAC,8CAA8C,CACvFG,UAAU,CAAE,QAAQ,CACpBC,YAAY,CAAE,EAAE,CAChBC,QAAQ,CAAE,CAAC,CACXC,SAAS,CAAE,IAAI,CACfC,MAAM,CAAE,KAAK,CACbC,YAAY,CAAE,UAAU,CACxBX,WAAW,CAAEA,WAAW,CAACY,GAAG,CAACC,IAAI,GAAK,CACpCA,IAAI,CAAEA,IAAI,CACVC,IAAI,CAAE,IAAI,CACVC,QAAQ,CAAE,IAAI,CACdC,OAAO,CAAE,IAAI,CACbC,GAAG,CAAE,IAAI,CACTC,KAAK,CAAE,IAAI,CACXR,MAAM,CAAE,KAAK,CACbS,QAAQ,CAAE,OAAO,CACjBC,aAAa,CAAE,IAAI,CACnBC,QAAQ,CAAE,IACZ,CAAC,CAAC,CACJ,CAAC,CAED,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGzB,YAAY,WAAW,CAAE,CACvD0B,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC3B,UAAU,CACjC,CAAC,CAAC,CAEF,GAAI,CAACqB,QAAQ,CAACO,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,eAAe,CAAC,CAClC,CAEA,MAAO,MAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAChD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,MAAO,MAAM,CAAAE,oBAAoB,CAAG,KAAAA,CAAOlC,WAAW,CAAEQ,QAAQ,GAAK,CACnE,KAAM,CAAAc,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,kDAAkD,CAAE,CAC/EC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAE5B,WAAW,CAAEQ,QAAS,CAAC,CAChD,CAAC,CAAC,CACF,GAAI,CAACc,QAAQ,CAACO,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,cAAc,CAAC,CACjC,CACA,MAAO,MAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAC9B,CAAC,CAED,MAAO,MAAM,CAAAI,YAAY,CAAG,KAAO,CAAAC,EAAE,EAAK,CACxC,KAAM,CAAAd,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,wCAAwCa,EAAE,EAAE,CAAE,CACzEZ,MAAM,CAAE,QACV,CAAC,CAAC,CACF,GAAI,CAACF,QAAQ,CAACO,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,eAAe,CAAC,CAClC,CACA,MAAO,MAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAC9B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}