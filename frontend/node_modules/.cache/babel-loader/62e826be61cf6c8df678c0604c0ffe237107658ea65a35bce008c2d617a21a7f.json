{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8000';\nexport const generateRecipe = async ingredients => {\n  try {\n    // 食材リストをレシピ作成用の形式に変換\n    const recipeData = {\n      title: `${ingredients.join('と')}を使ったレシピ`,\n      description: `${ingredients.join('、')}を使った美味しいレシピです。`,\n      instructions: `1. ${ingredients.join('、')}を適切な大きさに切ります。\\n2. 材料を炒めます。\\n3. 調味料を加えて煮込みます。`,\n      difficulty: \"medium\",\n      cooking_time: 30,\n      servings: 2,\n      image_url: null,\n      season: \"all\",\n      cuisine_type: \"japanese\",\n      ingredients: ingredients.map(name => ({\n        name: name,\n        unit: \"適量\",\n        calories: null,\n        protein: null,\n        fat: null,\n        carbs: null,\n        season: \"all\",\n        category: \"other\",\n        is_vegetarian: true,\n        is_vegan: true\n      }))\n    };\n    const response = await fetch(`${API_BASE_URL}/recipes/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(recipeData)\n    });\n    if (!response.ok) {\n      throw new Error('レシピの生成に失敗しました');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error generating recipe:', error);\n    throw error;\n  }\n};\nexport const generateRecipeWithAI = async (ingredients, servings, apiKey) => {\n  const response = await fetch('http://localhost:8000/api/v1/recipes/generate/ai', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      ingredients,\n      servings,\n      api_key: apiKey\n    })\n  });\n  if (!response.ok) {\n    throw new Error('レシピ生成に失敗しました');\n  }\n  return await response.json();\n};\nexport const deleteRecipe = async id => {\n  const response = await fetch(`http://localhost:8000/api/v1/recipes/${id}`, {\n    method: 'DELETE'\n  });\n  if (!response.ok) {\n    throw new Error('レシピの削除に失敗しました');\n  }\n  return await response.json();\n};","map":{"version":3,"names":["API_BASE_URL","generateRecipe","ingredients","recipeData","title","join","description","instructions","difficulty","cooking_time","servings","image_url","season","cuisine_type","map","name","unit","calories","protein","fat","carbs","category","is_vegetarian","is_vegan","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","error","console","generateRecipeWithAI","apiKey","api_key","deleteRecipe","id"],"sources":["/Users/yusukekobayashi/Desktop/Python_Application/AWS/frontend/src/api/recipe.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8000';\n\nexport const generateRecipe = async (ingredients) => {\n  try {\n    // 食材リストをレシピ作成用の形式に変換\n    const recipeData = {\n      title: `${ingredients.join('と')}を使ったレシピ`,\n      description: `${ingredients.join('、')}を使った美味しいレシピです。`,\n      instructions: `1. ${ingredients.join('、')}を適切な大きさに切ります。\\n2. 材料を炒めます。\\n3. 調味料を加えて煮込みます。`,\n      difficulty: \"medium\",\n      cooking_time: 30,\n      servings: 2,\n      image_url: null,\n      season: \"all\",\n      cuisine_type: \"japanese\",\n      ingredients: ingredients.map(name => ({\n        name: name,\n        unit: \"適量\",\n        calories: null,\n        protein: null,\n        fat: null,\n        carbs: null,\n        season: \"all\",\n        category: \"other\",\n        is_vegetarian: true,\n        is_vegan: true\n      }))\n    };\n\n    const response = await fetch(`${API_BASE_URL}/recipes/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(recipeData),\n    });\n\n    if (!response.ok) {\n      throw new Error('レシピの生成に失敗しました');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error generating recipe:', error);\n    throw error;\n  }\n};\n\nexport const generateRecipeWithAI = async (ingredients, servings, apiKey) => {\n  const response = await fetch('http://localhost:8000/api/v1/recipes/generate/ai', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ ingredients, servings, api_key: apiKey }),\n  });\n  if (!response.ok) {\n    throw new Error('レシピ生成に失敗しました');\n  }\n  return await response.json();\n};\n\nexport const deleteRecipe = async (id) => {\n  const response = await fetch(`http://localhost:8000/api/v1/recipes/${id}`, {\n    method: 'DELETE',\n  });\n  if (!response.ok) {\n    throw new Error('レシピの削除に失敗しました');\n  }\n  return await response.json();\n}; "],"mappings":"AAAA,MAAMA,YAAY,GAAG,uBAAuB;AAE5C,OAAO,MAAMC,cAAc,GAAG,MAAOC,WAAW,IAAK;EACnD,IAAI;IACF;IACA,MAAMC,UAAU,GAAG;MACjBC,KAAK,EAAE,GAAGF,WAAW,CAACG,IAAI,CAAC,GAAG,CAAC,SAAS;MACxCC,WAAW,EAAE,GAAGJ,WAAW,CAACG,IAAI,CAAC,GAAG,CAAC,gBAAgB;MACrDE,YAAY,EAAE,MAAML,WAAW,CAACG,IAAI,CAAC,GAAG,CAAC,8CAA8C;MACvFG,UAAU,EAAE,QAAQ;MACpBC,YAAY,EAAE,EAAE;MAChBC,QAAQ,EAAE,CAAC;MACXC,SAAS,EAAE,IAAI;MACfC,MAAM,EAAE,KAAK;MACbC,YAAY,EAAE,UAAU;MACxBX,WAAW,EAAEA,WAAW,CAACY,GAAG,CAACC,IAAI,KAAK;QACpCA,IAAI,EAAEA,IAAI;QACVC,IAAI,EAAE,IAAI;QACVC,QAAQ,EAAE,IAAI;QACdC,OAAO,EAAE,IAAI;QACbC,GAAG,EAAE,IAAI;QACTC,KAAK,EAAE,IAAI;QACXR,MAAM,EAAE,KAAK;QACbS,QAAQ,EAAE,OAAO;QACjBC,aAAa,EAAE,IAAI;QACnBC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ,CAAC;IAED,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGzB,YAAY,WAAW,EAAE;MACvD0B,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC3B,UAAU;IACjC,CAAC,CAAC;IAEF,IAAI,CAACqB,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;IAClC;IAEA,OAAO,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,oBAAoB,GAAG,MAAAA,CAAOlC,WAAW,EAAEQ,QAAQ,EAAE2B,MAAM,KAAK;EAC3E,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,kDAAkD,EAAE;IAC/EC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAE5B,WAAW;MAAEQ,QAAQ;MAAE4B,OAAO,EAAED;IAAO,CAAC;EACjE,CAAC,CAAC;EACF,IAAI,CAACb,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;EACjC;EACA,OAAO,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;AAC9B,CAAC;AAED,OAAO,MAAMM,YAAY,GAAG,MAAOC,EAAE,IAAK;EACxC,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwCe,EAAE,EAAE,EAAE;IACzEd,MAAM,EAAE;EACV,CAAC,CAAC;EACF,IAAI,CAACF,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;EAClC;EACA,OAAO,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;AAC9B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}